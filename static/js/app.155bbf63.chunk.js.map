{"version":3,"sources":["shared/model/Message.ts","src/atoms/Row.tsx","src/styles/Font.ts","src/Results.tsx","src/UrlHandler.ts","ConfigConstants.ts","src/RoomHandler.ts","src/VoteValues.tsx","src/builders/RoomCard.tsx","src/builders/UserCard.tsx","src/Root.tsx","src/hooks/Theme.ts","src/styles/Theme.ts","App.tsx","web-build/register-service-worker.js"],"names":["MessageType","FlexWrapRow","children","mode","View","style","alignItems","alignSelf","flex","flexDirection","flexWrap","justifyContent","fontStyles","StyleSheet","create","body1","fontSize","fontWeight","letterSpacing","body2","button","caption","headline1","headline2","headline3","headline4","headline5","headline6","overline","subtitle1","subtitle2","Results","users","isDark","useTheme","colors","roundness","renderUser","useCallback","user","displayValue","voteValue","key","id","styles","userCard","borderRadius","overflow","backgroundColor","accent","primary","flexShrink","paddingHorizontal","color","numberOfLines","userName","map","height","margin","width","elevation","Colors","useRoom","ws","useRef","WebSocket","current","roomId","search","window","location","URLSearchParams","get","undefined","useUrlParam","Platform","OS","UUID","toString","useState","name","admin","room","setRoom","send","msg","JSON","stringify","useEffect","onopen","joinRequest","type","JoinRequest","payload","onmessage","event","parse","data","RoomUpdate","__DEV__","onerror","error","readyState","OPEN","updateNameRequest","SetName","vote","SetVoteValue","values","ValueCard","value","onPress","onCardPress","valueContainer","getColorForValue","valueCard","dark","DarkOne","LightOne","DarkTwo","LightTwo","DarkThree","LightThree","DarkFive","LightFive","DarkEight","LightEight","DarkThirteen","LightThirteen","DarkTwentyOne","LightTwentyOne","DarkUnknown","LightUnknown","VoteValues","onValuePress","container","marginHorizontal","marginVertical","RoomCard","UserCard","username","Root","toggleTheme","setUserName","updateUserName","newName","AsyncStorage","setItem","getItem","then","savedName","paddingBottom","page","canvas","onChange","borderBottomColor","borderBottomWidth","paddingRight","paddingLeft","paddingVertical","label","onChangeText","Object","wp","useSystemDarkMode","Appearance","getColorScheme","isSystemDark","setSystemDark","subscription","addChangeListener","colorScheme","remove","light","DefaultTheme","DarkTheme","setIsDark","savedIsDark","theme","Theme","navigator","addEventListener","serviceWorker","register","scope","info","catch","console"],"mappings":"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","file":"static/js/app.155bbf63.chunk.js","sourcesContent":["import { Room } from \"./Room\";\nimport { VoteValue } from \"./User\";\n\nexport type Message = JoinRequestMessage | JoinResponseMessage | SetVoteValueMessage | SetNameMessage | LeaveRequestMessage | RoomUpdateMessage;\n\nexport enum MessageType {\n  JoinRequest,\n  JoinResponse,\n  LeaveRequest,\n  SetVoteValue,\n  SetName,\n  RoomUpdate,\n}\n\nexport interface JoinRequestMessage {\n  type: MessageType.JoinRequest;\n  roomId: string;\n  payload: {\n    name: string;\n  };\n}\n\nexport interface JoinResponseMessage {\n  type: MessageType.JoinResponse;\n  roomId: string;\n  payload: {\n    userId: string;\n  };\n}\n\nexport interface SetVoteValueMessage {\n  type: MessageType.SetVoteValue;\n  roomId: string;\n  payload: {\n    voteValue: VoteValue;\n  };\n}\n\nexport interface SetNameMessage {\n  type: MessageType.SetName;\n  roomId: string;\n  payload: {\n    name: string;\n  };\n}\n\nexport interface LeaveRequestMessage {\n  type: MessageType.LeaveRequest;\n  roomId: string;\n}\n\nexport interface RoomUpdateMessage {\n  type: MessageType.RoomUpdate;\n  roomId: string;\n  payload: {\n    room: Room;\n  };\n}","import React from 'react';\nimport { View } from 'react-native';\n\ntype FlexWrapRowProps = {\n  mode?:\n    | 'flex-start'\n    | 'flex-end'\n    | 'center'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly';\n};\n\nexport const FlexWrapRow: React.FC<FlexWrapRowProps> = ({ children, mode }) => {\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        alignSelf: 'stretch',\n        flex: 1,\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        justifyContent: mode,\n      }}\n    >\n      {children}\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\n\nexport const fontStyles = StyleSheet.create({\n  body1: {\n    fontSize: 16,\n    fontWeight: '400',\n    letterSpacing: 0.5,\n  },\n  body2: {\n    fontSize: 14,\n    fontWeight: '400',\n    letterSpacing: 0.25,\n  },\n  button: {\n    fontSize: 14,\n    fontWeight: '500',\n    letterSpacing: 1.25,\n  },\n  caption: {\n    fontSize: 12,\n    fontWeight: '400',\n    letterSpacing: 0.4,\n  },\n  headline1: {\n    fontSize: 96,\n    fontWeight: '300',\n    letterSpacing: -1.5,\n  },\n  headline2: {\n    fontSize: 60,\n    fontWeight: '300',\n    letterSpacing: -0.5,\n  },\n  headline3: {\n    fontSize: 48,\n    fontWeight: '400',\n    letterSpacing: 0,\n  },\n  headline4: {\n    fontSize: 34,\n    fontWeight: '400',\n    letterSpacing: 0.25,\n  },\n  headline5: {\n    fontSize: 24,\n    fontWeight: '400',\n    letterSpacing: 0,\n  },\n  headline6: {\n    fontSize: 20,\n    fontWeight: '500',\n    letterSpacing: 0.15,\n  },\n  overline: {\n    fontSize: 10,\n    fontWeight: '400',\n    letterSpacing: 1.5,\n  },\n  subtitle1: {\n    fontSize: 16,\n    fontWeight: '400',\n    letterSpacing: 0.15,\n  },\n  subtitle2: {\n    fontSize: 14,\n    fontWeight: '500',\n    letterSpacing: 0.1,\n  },\n});\n","import React, { useCallback, useMemo } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Surface, Text, useTheme } from 'react-native-paper';\n\nimport { User } from '../shared/model/User';\n\nimport { FlexWrapRow } from './atoms/Row';\nimport { fontStyles } from './styles/Font';\n\ntype Props = {\n  users: User[];\n  isDark: boolean;\n};\nexport const Results: React.FC<Props> = ({ users, isDark }) => {\n  const { colors, roundness } = useTheme();\n  const renderUser = useCallback(\n    (user: User) => {\n      const displayValue =\n        user.voteValue && user.voteValue !== 'hidden' ? user.voteValue : '?';\n\n      return (\n        <Surface\n          key={`${user.id}`}\n          style={[\n            styles.userCard,\n            { borderRadius: roundness * 2, overflow: 'hidden' },\n          ]}\n        >\n          <View\n            style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}\n          >\n            <Text style={fontStyles.headline3}>{displayValue}</Text>\n          </View>\n          <View\n            style={{\n              alignItems: 'center',\n              backgroundColor: isDark ? colors.accent : colors.primary,\n              flexShrink: 1,\n              paddingHorizontal: 4,\n            }}\n          >\n            <Text\n              style={[fontStyles.body1, { color: isDark ? 'black' : 'white' }]}\n              numberOfLines={1}\n            >\n              {user.userName}\n            </Text>\n          </View>\n        </Surface>\n      );\n    },\n    [colors.accent, colors.primary, isDark, roundness],\n  );\n\n  return <FlexWrapRow mode=\"center\">{users.map(renderUser)}</FlexWrapRow>;\n};\n\nconst styles = StyleSheet.create({\n  userCard: {\n    height: 150,\n    margin: 8,\n    width: 100,\n    elevation: 8,\n  },\n});\n","export const useUrlParam = (key: string) => {\n  const search = window.location.search;\n\n  const params = new URLSearchParams(search);\n\n  return params.get(key) || undefined;\n};\n","export enum Colors {\n  DarkOne = '#94cc7d',\n  DarkTwo = '#69cb30',\n  DarkThree = '#c8cc00',\n  DarkFive = '#b27500',\n  DarkEight = '#a10000',\n  DarkThirteen = '#a252b7',\n  DarkTwentyOne = '#8a8a8a',\n  DarkUnknown = '#000000',\n  LightOne = '#C6FFAD',\n  LightTwo = '#9EFF64',\n  LightThree = '#FFFF3C',\n  LightFive = '#E9A426',\n  LightEight = '#DB0000',\n  LightThirteen = '#D581EA',\n  LightTwentyOne = '#BABABA',\n  LightUnknown = '#FFFFFF',\n}\n","import UUID from 'pure-uuid';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Platform } from 'react-native';\n\nimport {\n  JoinRequestMessage,\n  Message,\n  MessageType,\n  SetNameMessage,\n  SetVoteValueMessage,\n} from '../shared/model/Message';\nimport { Room } from '../shared/model/Room';\nimport { VoteValue } from '../shared/model/User';\n\nimport { useUrlParam } from './UrlHandler';\n\n// Connect to Heroku 🧙‍♂️ (Update the port)\nconst SERVER_HOST = __DEV__\n  ? 'ws://localhost:8999'\n  : 'wss://planningpokerserver.herokuapp.com/';\n\nconst createEmptyRoom = (id: string): Room => ({\n  id,\n  name: '',\n  users: {},\n  admin: undefined,\n});\n\nexport const useRoom = (userName: string) => {\n  const ws = useRef(new WebSocket(SERVER_HOST)).current;\n  const roomId = useUrlParam('roomId');\n\n  if (Platform.OS === 'web' && !roomId) {\n    window.location.search = 'roomId=' + new UUID(4).toString();\n  }\n\n  const [room, setRoom] = useState(\n    createEmptyRoom(roomId || new UUID(4).toString()),\n  );\n\n  userName = userName || 'Guest';\n\n  const send = useCallback((msg: any) => ws.send(JSON.stringify(msg)), [ws]);\n\n  useEffect(() => {\n    ws.onopen = () => {\n      if (__DEV__) {\n        // eslint-disable-next-line no-console\n        console.log('Opened WebSocket connection');\n      }\n\n      const joinRequest: JoinRequestMessage = {\n        type: MessageType.JoinRequest,\n        roomId: room.id,\n        payload: {\n          name: userName,\n        },\n      };\n      send(joinRequest);\n    };\n    ws.onmessage = (event) => {\n      const msg: Message = JSON.parse(event.data);\n\n      if (__DEV__) {\n        // eslint-disable-next-line no-console\n        console.log('Received message: ', msg);\n      }\n\n      switch (msg.type) {\n        case MessageType.RoomUpdate: {\n          if (__DEV__) {\n            // eslint-disable-next-line no-console\n            console.log('Updating room');\n          }\n          setRoom(msg.payload.room);\n          break;\n        }\n        default:\n      }\n    };\n    ws.onerror = (error) => {\n      if (__DEV__) {\n        // eslint-disable-next-line no-console\n        console.error('Error: ', error);\n      }\n      // setErrorMessage({ title: 'Oops!', message: 'Something went wrong...' });\n    };\n  }, [room.id, send, userName, ws]);\n\n  useEffect(() => {\n    if (ws.readyState === WebSocket.OPEN) {\n      const updateNameRequest: SetNameMessage = {\n        type: MessageType.SetName,\n        roomId: room.id,\n        payload: {\n          name: userName,\n        },\n      };\n      send(updateNameRequest);\n    }\n  }, [room.id, send, userName, ws.readyState]);\n\n  const vote = (voteValue: VoteValue) => {\n    const msg: SetVoteValueMessage = {\n      type: MessageType.SetVoteValue,\n      roomId: room.id,\n      payload: {\n        voteValue,\n      },\n    };\n    send(msg);\n  };\n\n  return { vote, room };\n};\n","import React, { useCallback } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useColorScheme } from 'react-native-appearance';\nimport { Card, Text } from 'react-native-paper';\n\nimport { Colors } from '../ConfigConstants';\nimport { VoteValue } from '../shared/model/User';\n\nimport { FlexWrapRow } from './atoms/Row';\n\ntype Props = {\n  value: VoteValue;\n  onPress: (value: VoteValue) => void;\n  isDark: boolean;\n};\n\nconst values: VoteValue[] = [0, 1, 2, 3, 5, 8, 13, 21, '🤔'];\n\nexport const ValueCard: React.FC<Props> = ({ value, onPress, isDark }) => {\n  const onCardPress = useCallback(() => onPress(value), [onPress, value]);\n\n  return (\n    <Card\n      style={[\n        styles.valueContainer,\n        {\n          backgroundColor: getColorForValue(value, isDark),\n        },\n      ]}\n      onPress={onCardPress}\n    >\n      <View style={styles.valueCard}>\n        <Text>{value}</Text>\n      </View>\n    </Card>\n  );\n};\n\nconst getColorForValue = (value: VoteValue, dark: boolean): Colors => {\n  switch (value) {\n    case 1:\n      return dark ? Colors.DarkOne : Colors.LightOne;\n    case 2:\n      return dark ? Colors.DarkTwo : Colors.LightTwo;\n    case 3:\n      return dark ? Colors.DarkThree : Colors.LightThree;\n    case 5:\n      return dark ? Colors.DarkFive : Colors.LightFive;\n    case 8:\n      return dark ? Colors.DarkEight : Colors.LightEight;\n    case 13:\n      return dark ? Colors.DarkThirteen : Colors.LightThirteen;\n    case 21:\n      return dark ? Colors.DarkTwentyOne : Colors.LightTwentyOne;\n    default:\n      return dark ? Colors.DarkUnknown : Colors.LightUnknown;\n  }\n};\n\ntype ValuesProps = {\n  onValuePress: (value: VoteValue) => void;\n  isDark: boolean;\n};\n\nexport const VoteValues: React.FC<ValuesProps> = ({ onValuePress, isDark }) => {\n  return (\n    <FlexWrapRow mode=\"center\">\n      {values.map((value) => (\n        <ValueCard\n          key={value}\n          value={value}\n          onPress={onValuePress}\n          isDark={isDark}\n        />\n      ))}\n    </FlexWrapRow>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  valueContainer: {\n    marginHorizontal: 8,\n    elevation: 4,\n    marginVertical: 4,\n  },\n  valueCard: {\n    alignItems: 'center',\n    borderRadius: 8,\n    height: 50,\n    justifyContent: 'center',\n    width: 50,\n  },\n});\n","import React from 'react';\nimport { View } from 'react-native';\nimport { Card, Text } from 'react-native-paper';\n\nimport { fontStyles } from '../styles/Font';\n\ntype RoomCardProps = {\n  roomId: string;\n};\n\nexport const RoomCard: React.FC<RoomCardProps> = ({ roomId }) => {\n  return (\n    <Card elevation={0} style={{ flexShrink: 1 }}>\n      <View style={{ marginHorizontal: 8, marginVertical: 16, flexShrink: 1 }}>\n        <Text style={fontStyles.headline5}>Room</Text>\n        <Text\n          style={fontStyles.subtitle2}\n          numberOfLines={2}\n        >{`ID: ${roomId}`}</Text>\n      </View>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { View } from 'react-native';\nimport { Card, Text } from 'react-native-paper';\n\nimport { fontStyles } from '../styles/Font';\n\ntype UserCardProps = {\n  username: string;\n};\n\nexport const UserCard: React.FC<UserCardProps> = ({ username }) => {\n  return (\n    <Card elevation={0}>\n      <View style={{ marginHorizontal: 8, marginVertical: 16 }}>\n        <Text style={fontStyles.headline5}>User</Text>\n        <Text style={fontStyles.subtitle2}>{`username: ${username}`}</Text>\n      </View>\n    </Card>\n  );\n};\n","import Switch from 'expo-dark-mode-switch';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { AsyncStorage, StyleSheet, View } from 'react-native';\nimport { Surface, Text, TextInput, useTheme } from 'react-native-paper';\nimport { widthPercentageToDP as wp } from 'react-native-responsive-screen';\n\nimport { Results } from './Results';\nimport { useRoom } from './RoomHandler';\nimport { VoteValues } from './VoteValues';\nimport { FlexWrapRow } from './atoms/Row';\nimport { RoomCard } from './builders/RoomCard';\nimport { UserCard } from './builders/UserCard';\nimport { fontStyles } from './styles/Font';\n\ntype Props = {\n  isDark: boolean;\n  toggleTheme: () => void;\n};\n\nexport const Root: React.FC<Props> = ({ isDark, toggleTheme }) => {\n  const [userName, setUserName] = useState<string>('');\n  const { colors } = useTheme();\n\n  const { vote, room } = useRoom(userName);\n\n  const updateUserName = useCallback(\n    (newName: string) => {\n      setUserName(newName);\n      AsyncStorage.setItem('username', newName);\n    },\n    [setUserName],\n  );\n\n  useEffect(() => {\n    AsyncStorage.getItem('username').then((savedName) => {\n      if (savedName) {\n        setUserName(savedName);\n      }\n    });\n  }, []);\n\n  return (\n    <Surface\n      style={[\n        { backgroundColor: colors.primary, paddingBottom: 32 },\n        styles.page,\n      ]}\n    >\n      <Surface style={styles.canvas}>\n        <FlexWrapRow mode=\"space-between\">\n          <Text style={fontStyles.headline3}>{'Planning Poker 🎲'}</Text>\n          <Switch value={isDark} onChange={toggleTheme} />\n        </FlexWrapRow>\n        <View\n          style={{\n            borderBottomColor: isDark ? colors.accent : colors.primary,\n            borderBottomWidth: 2,\n            alignSelf: 'stretch',\n          }}\n        />\n        <FlexWrapRow mode=\"space-evenly\">\n          <View style={{ flex: 1, paddingRight: 8 }}>\n            <RoomCard roomId={room.id} />\n          </View>\n          <View style={{ flex: 1, paddingLeft: 8 }}>\n            <UserCard username={userName} />\n          </View>\n        </FlexWrapRow>\n\n        <View style={{ alignSelf: 'stretch', paddingVertical: 8 }}>\n          <TextInput\n            value={userName}\n            label={'Username'}\n            onChangeText={updateUserName}\n          />\n        </View>\n        <View style={{ paddingVertical: 8 }}>\n          <VoteValues onValuePress={vote} isDark={isDark} />\n        </View>\n        <Results users={Object.values(room.users)} isDark={isDark} />\n      </Surface>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  page: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  canvas: {\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n    alignItems: 'center',\n    width: wp('80%'),\n    height: '100%',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { Appearance } from 'react-native-appearance';\n\nexport const useSystemDarkMode = () => {\n  const [isSystemDark, setSystemDark] = useState<boolean>(\n    Appearance.getColorScheme() === 'dark',\n  );\n\n  useEffect(() => {\n    const subscription = Appearance.addChangeListener(({ colorScheme }) => {\n      setSystemDark(colorScheme === 'dark');\n    });\n\n    return () => subscription.remove();\n  }, []);\n\n  return isSystemDark;\n};\n\nexport const useManualDarkMode = () => {\n  const isSystemDark = useSystemDarkMode();\n  const [isDark, setIsDark] = useState(isSystemDark);\n\n  useEffect(() => {\n    setIsDark(isSystemDark);\n  }, [isSystemDark]);\n\n  return [isDark, setIsDark];\n};\n","import { DarkTheme, DefaultTheme, Theme } from 'react-native-paper';\n\nconst light: Theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: '#00838f',\n    accent: '#FfCDD2',\n  },\n};\n\nconst dark: Theme = {\n  ...DarkTheme,\n  colors: {\n    ...DarkTheme.colors,\n    primary: '#005662',\n    accent: '#cb9ca1',\n  },\n};\n\nexport default { light, dark };\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { AsyncStorage } from 'react-native';\nimport { AppearanceProvider } from 'react-native-appearance';\nimport { Provider as PaperProvider } from 'react-native-paper';\n\nimport { Root } from './src/Root';\nimport { useSystemDarkMode } from './src/hooks/Theme';\nimport Theme from './src/styles/Theme';\n\nexport default () => {\n  const isSystemDark = useSystemDarkMode();\n  const [isDark, setIsDark] = useState(isSystemDark);\n  const toggleTheme = useCallback(() => {\n    setIsDark(!isDark);\n    AsyncStorage.setItem('isDark', JSON.stringify(!isDark));\n  }, [isDark, setIsDark]);\n\n  useEffect(() => {\n    AsyncStorage.getItem('isDark').then((savedIsDark) => {\n      if (savedIsDark) setIsDark(JSON.parse(savedIsDark));\n    });\n  }, []);\n\n  return (\n    <AppearanceProvider>\n      <PaperProvider theme={isDark ? Theme.dark : Theme.light}>\n        <Root isDark={isDark} toggleTheme={toggleTheme} />\n      </PaperProvider>\n    </AppearanceProvider>\n  );\n};\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/PlanningPokerApp/expo-service-worker.js', { scope: '/PlanningPokerApp/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}