{"version":3,"sources":["src/hooks/Theme.ts","src/styles/Theme.ts","App.tsx","web-build/register-service-worker.js","assets/fonts/Poppins-Regular.ttf"],"names":["useSystemDarkMode","useState","Appearance","getColorScheme","isSystemDark","setSystemDark","useEffect","subscription","addChangeListener","colorScheme","remove","light","DefaultTheme","colors","accent","primary","surface","text","dark","DarkTheme","isDark","setIsDark","useFonts","Poppins","require","fontsLoaded","useCallback","AsyncStorage","setItem","JSON","stringify","getItem","then","savedIsDark","parse","theme","Theme","Text","AppLoading","navigator","window","addEventListener","serviceWorker","register","scope","info","catch","error","console","module","exports"],"mappings":"+KAKaA,G,OAAoB,WAAO,IAAD,EACCC,mBACJ,SAAhCC,aAAWC,kBAFwB,WAC9BC,EAD8B,KAChBC,EADgB,KAarC,OARAC,qBAAU,WACR,IAAMC,EAAeL,aAAWM,mBAAkB,YAAsB,IAAnBC,EAAkB,EAAlBA,YACnDJ,EAA8B,SAAhBI,MAGhB,OAAO,kBAAMF,EAAaG,YACzB,IAEIN,I,mmBChBT,IAsBe,GAAEO,MAtBC,KACbC,IADa,CAEhBC,OAAO,EAAD,GACDD,IAAaC,OADZ,CAEJC,OAAQ,UACRC,QAAS,UACTC,QAAS,UACTC,KAAM,cAecC,KAXP,KACZC,IADY,CAEfN,OAAO,EAAD,GACDM,IAAUN,OADT,CAEJC,OAAQ,UACRC,QAAS,UACTC,QAAS,UACTC,KAAM,eCTK,eACb,IAAMb,EAAeJ,IADF,EAESC,mBAASG,GAFlB,WAEZgB,EAFY,KAEJC,EAFI,OAIGC,YAAS,CAC7BC,QAASC,EAAQ,OADZC,EAJY,YAQCC,uBAAY,WAC9BL,GAAWD,GACXO,IAAaC,QAAQ,SAAUC,KAAKC,WAAWV,MAC9C,CAACA,EAAQC,IAQZ,OANAf,qBAAU,WACRqB,IAAaI,QAAQ,UAAUC,MAAK,SAACC,GAC/BA,GAAaZ,EAAUQ,KAAKK,MAAMD,SAEvC,IAEER,EAKH,kBAAC,qBAAD,KACE,kBAAC,IAAD,CAAeU,MAAOf,EAASgB,EAAMlB,KAAOkB,EAAMzB,OAChD,kBAAC0B,EAAA,EAAD,eANG,kBAACC,EAAA,EAAD,Q,+DC7BP,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,2CAA4C,CAAEC,MAAO,uBAC9DZ,MAAK,SAAUa,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,U,oBCV1DE,EAAOC,QAAU,IAA0B,gC","file":"static/js/app.1be72e61.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ImageStyle, StyleSheet, TextStyle, ViewStyle } from 'react-native';\nimport { Appearance } from 'react-native-appearance';\nimport { Theme, useTheme } from 'react-native-paper';\n\nexport const useSystemDarkMode = () => {\n  const [isSystemDark, setSystemDark] = useState<boolean>(\n    Appearance.getColorScheme() === 'dark',\n  );\n\n  useEffect(() => {\n    const subscription = Appearance.addChangeListener(({ colorScheme }) => {\n      setSystemDark(colorScheme === 'dark');\n    });\n\n    return () => subscription.remove();\n  }, []);\n\n  return isSystemDark;\n};\n\nexport const useManualDarkMode = () => {\n  const isSystemDark = useSystemDarkMode();\n  const [isDark, setIsDark] = useState(isSystemDark);\n\n  useEffect(() => {\n    setIsDark(isSystemDark);\n  }, [isSystemDark]);\n\n  return [isDark, setIsDark];\n};\n\nexport const useStyleSheet = <T>(createStyleSheet: (theme: Theme) => T) => {\n  const theme = useTheme();\n  const [styles, setStyles] = useState<T>(createStyleSheet(theme));\n\n  useEffect(() => {\n    setStyles(createStyleSheet(theme));\n  }, [createStyleSheet, theme]);\n\n  return styles;\n};\n","import { DarkTheme, DefaultTheme, Theme } from 'react-native-paper';\n\nconst light: Theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    accent: '#ef8354',\n    primary: '#eaeaeb',\n    surface: '#bfc0c0',\n    text: '#000000',\n  },\n};\n\nconst dark: Theme = {\n  ...DarkTheme,\n  colors: {\n    ...DarkTheme.colors,\n    accent: '#cd4b13',\n    primary: '#292d3d',\n    surface: '#323a49',\n    text: '#ffffff',\n  },\n};\n\nexport default { light, dark };\n","import { useFonts } from '@use-expo/font';\nimport { AppLoading } from 'expo';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { AsyncStorage, Text } from 'react-native';\nimport { AppearanceProvider } from 'react-native-appearance';\nimport { Provider as PaperProvider } from 'react-native-paper';\n\nimport { Root } from './src/Root';\nimport { useSystemDarkMode } from './src/hooks/Theme';\nimport Theme from './src/styles/Theme';\n\nexport default () => {\n  const isSystemDark = useSystemDarkMode();\n  const [isDark, setIsDark] = useState(isSystemDark);\n\n  const [fontsLoaded] = useFonts({\n    Poppins: require('./assets/fonts/Poppins-Regular.ttf'),\n  });\n\n  const toggleTheme = useCallback(() => {\n    setIsDark(!isDark);\n    AsyncStorage.setItem('isDark', JSON.stringify(!isDark));\n  }, [isDark, setIsDark]);\n\n  useEffect(() => {\n    AsyncStorage.getItem('isDark').then((savedIsDark) => {\n      if (savedIsDark) setIsDark(JSON.parse(savedIsDark));\n    });\n  }, []);\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <AppearanceProvider>\n      <PaperProvider theme={isDark ? Theme.dark : Theme.light}>\n        <Text>Test</Text>\n        {/* <Root isDark={isDark} toggleTheme={toggleTheme} /> */}\n      </PaperProvider>\n    </AppearanceProvider>\n  );\n};\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/PlanningPokerApp/expo-service-worker.js', { scope: '/PlanningPokerApp/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Regular.ttf\";"],"sourceRoot":""}